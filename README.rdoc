---
Deep Import:
	- Load many objects of 1 type with 1 transaction
		- ActiveRecord Import: https://github.com/zdennis/activerecord-import/wiki
	- Load X nested model instances from N model classess
		- X is the large number of batch processed items
			- relevant to database servers processing power for a single transaction
		- in N + M transations
			- N = number of model classes involved
				- configuration example: 5 (classes a-f)
			- M = number of belongs_to relationships involved
				- configuration example: 5
			- N and M are meant to be neglible compared to X
	- (De)Serialize models for reuse

--- 
Configuration:
	- model map:
		- yaml mapping of how you want to load the data
			- config/deep_import.yml
			- sample (represents singularized and pluralized forms of model names):
				 a:					# The root class name
					- bs: 		# A has_many Bs, B belongs_to A
						- c 		# B has_one C, C belongs_to B 
					- ds:     # A has_many Ds, D belongs_to A
						- cs 		# D has_many Cs, C belongs_to D
						- es 		# D has_many Es, E belongs_to D
			- sample2:
					Product:
						Features:
							Reviews:			# Feature has_many Reviews
								polymorphic: "Reviewer" # Review belongs_to reviewer, type=Feature
						Reviews:				# Product has_many Reviews
							polymorphic: "Reviewer" # Review belongs_to reviewer, type=Product
					  Keywords:
							preexisting: true # use hard id assignment, soft is default
						
---
Database Id Tracking:
	- Use id tracking models:
		- soft_<model_type_pluralized>
			- soft_id
			- belongs_to_<association>_id
				- string if soft id assignment
				- int if hard/preexisting id assignment
			- if polymorphic: belongs_to_<association>_type
	- doesn't add overhead to core models

---
Setup:
	- rake deep_import:setup
		- parse config file
		- create rails generate model statements for each relation
		- print generation statements to script
		- tell user to run it, and db:migrate

---
Batch Logic:
	Creation:
	- DeepImport.create_<model_type>( attrs = {} )
		- for constructing a root object instance
	- <model instance>.create_child_<model_type>( attrs = {} )
		- for constructing a model belonging to the first
			- extends method_missing on active record base

	References:
	- <model instance>.soft_reference( other_model_instance )
		- for setting id's for belongs to associations beyond the primary parent
			- extends method_missing on active record base
	- <model instance>.hard_reference( other_model_instance )
		- useful for aligning to existing information such as seed data
		- set the association id based on the other models actual id
			- extends method_missing on active record base

	DeepImport:
		- commit_model_instances: 
			- save models to database
			- assign all association id fields
		- serialize: save models to marshal, json, or yaml format
		- deserialize
