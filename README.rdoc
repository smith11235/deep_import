---
Deep Import:
	- A gem for batch data loading with Rails
	- In big data, or at least batched loading of non trivial data:
		- database transactions are significant 

Transaction Breakdown:
    Standard Rails Model Instanct Creation: 
      - 1 instance per transation
      - Product.new.save, @product.reviews.create
    gem:ActiveRecord-import: 
      - X instances per transaction for 1 model class
      - https://github.com/zdennis/activerecord-import/wiki
    gem:DeepImport:
      - Load X instances of M model classes
      - in M + B transactions
      - Where B is the number of belongs to relationships between the M model classes
      - M and B must be neglible compared to X for benefit

Features:
	- improved efficiency when loading 'many' model instances
	- models can have associations!
	- models can be serialized, and reloaded to rails databases on demand
		- a hidden 'id field' is used to preserve associations
			- when rails id field values are still unknown
			- this is where the B transactions come from
				- 1 query for each belongs_to association

Usage:
	- Gemfile:  "gem: 'deep_import'"
	- create a config/deep_import.yml
		- with the architecture of your batched imports
	- rake deep_import:generate_config
	- rake deep_import:setup

Model Rules:
	- each model can have multiple belongs_to
		- one 'parent' from config, auto-defined
		- instantiate models in DFS ordering with minimal syntax
			- see lib/deep_import/deep_import.rake, deep_import:benchmark

---
Set Parent:
	- in after_initialize:
		- ask Config for last parent of <model class>
		- deep_import_after_initialize:
			- ask Cache for last_instantiated_parent of <model class>
				- needs to be fast!
				- use config to determine the parent 

---
belongs_to:
- :before_save:
	- for each /.*_id/ field, if ! self.<non-id>.nil?, set deep import id's accordingly
		- # for each association

---
core settings should be a single source
	- model prefix: DeepImport

---
rename after_initialize => ModelAddIn

---
rake deep_import:setup:
	- detect script/ files
	- run destroy
	- remove both
	- create new ones

---
Config File:
	- Validate: check class names for existence/validity
	- Generate: analyze models with ruby_erd

---
Model Flags:
_preexisting:
	- integer instead of string 
_polymorphic:
