---
Deep Import:
* A gem for loading big data in Rails
* allows standard active record syntax for clear and familiar code

Transaction Breakdown:
* when creating many models, database transaction costs are significant
    Standard Rails Model Instanct Creation: 
      - 1 instance per transation
      - Product.new.save, @product.reviews.create
    gem:ActiveRecord-import: 
      - X instances per transaction for 1 model class
      - https://github.com/zdennis/activerecord-import/wiki
    gem:DeepImport:
      - Load X instances of M model classes
      - in M + B transactions
      - Where B is the number of belongs to relationships between the M model classes
      - M and B must be neglible compared to X for benefit

Benchmark:
* Models are Parent, Child, Grandchild
  * defined in config/deep_import.yml (provided by application developer, not gem)
* X Parents have X Children each and 10 GrandChildren from each Child
  *  1,110 objects for 10 x 10 x 10 
	* 27,930 objects for 30 x 30 x 30
* Rake Task: deep_import:benchmark
  * defined in lib/deep_import/deep_import.rake
* Results: (the 'real' column shows the database transaction time)
    mysql running on remote server
                    user     system      total        real
    10 x 10 x 10
     deep_import:  4.650000   0.070000   4.720000 (  7.043655)
         classic:  4.370000   0.260000   4.630000 (209.035913)
    30 x 30 x 30
     deep_import:  80.770000   0.980000  81.750000 ( 97.582577)
         classic:  120.160000   7.850000 128.010000 (5264.665823) 

Features:
- improved efficiency when loading 'many' model instances
- models can have associations
- models can be parsed in a DFS fashion with minimal syntax
- setup involved 1 configuration file, 0 edits to model files
  - and running of some rake tasks
- models can be serialized and reloaded at need with relationships preserved

Usage:
- Gemfile:  "gem: 'deep_import', :git => 'git://github.com/smith11235/deep_import'"
- create a config/deep_import.yml with your model architecture
- rake deep_import:setup
- remove all calls to saving methods 
- add a DeepImport.commit call at the end of your loader


---
* during save, deep import models doubling
Commit:
	- get deep_import association distribution
		- DeepImportModel.group( belongs_to_id_field ).select( count( deep_import_id ) ).order( belongs_to_id_field )
	- get and compare association distribution 
		- Model.group( belongs_to_id_field ).select( count( id ) ).order( belongs_to_id_field )
		- is the ordering correct to do this? or should I force a group_by deep_import_belongs_to_id_field
	- set deep_import_id = NULL on models
		- to flag that they are finished being loaded
	- delete deep_import* models
		- to save space on the database

---
indexes:
	- move from deep_import:index to deep_import:setup

---
refactor:
	- gemspec at root
	- .rake in lib/tasks
	- lib/deep_import.rb

---
gemspec:
- add proper dependencies, activerecord, activerecord-import, rails

---
belongs_to:
- to allow:
	- child.other_parent = other_parent
- :before_save:
	- for each /.*_id/ field, if ! self.<non-id>.nil?, set deep import id's accordingly
		- # for each association

---
rake deep_import:setup:
	- detect script/ files
	- run destroy
	- remove both
	- create new ones

---
Config File:
	- Validate: check class names for existence/validity
	- Generate: analyze models with ruby_erd

---
Model Flags:
_preexisting:
	- integer instead of string 
_polymorphic:
