---
Deep Import:
	- A gem for batch data loading with Rails
	- In big data, or at least batched loading of non trivial data:
		- database transactions are significant 

Transaction Breakdown:
	- Standard Rails Model Instanct Creation: 
		- 1 instance per transation
		- Product.new.save, @product.reviews.create
	- gem:ActiveRecord-import: 
		- X instances per transaction for 1 model class
		- ActiveRecord Import: https://github.com/zdennis/activerecord-import/wiki
	- gem:DeepImport:
		- Load X instances of M model classes
		- in M + B transactions
		- Where B is the number of belongs to relationships between the M model classes
		- M and B must be neglible compared to X for benefit

Features:
	- improved efficiency when loading 'many' model instances
	- models can have associations!
	- models can be serialized, and reloaded to rails databases on demand
		- a hidden 'id field' is used to preserve associations
			- when rails id field values are still unknown
			- this is where the B transactions come from
				- 1 query for each belongs_to association

Usage:
	- Gemfile:  "gem: 'deep_import'"
	- create a config/deep_import.yml
		- with the architecture of your batched imports
	- rake deep_import:generate_config
	- rake deep_import:setup
	- write code (or have it ready before hand)

---
Set Parent:
	- in after_initialize:
		- ask Config for parents of <model class>
		- ask Cache for last_instantiated_parent of <model class>
			- cache needs to track creation time, and other details
				- all soft_models should have parse_at:datetime
			- models still need a deep_import_id field

---
Config File:
	- Validate: check class names for existence/validity
	- Generate: analyze models with ruby_erd

---
Database Id Tracking:
	- Use id tracking models:
		- soft_<model_type_pluralized>
			- soft_id
			- belongs_to_<association>_id
				- string if soft id assignment
				- int if hard/preexisting id assignment
			- if polymorphic: belongs_to_<association>_type
	- doesn't add overhead to core models

---
Batch Logic:
	Creation:
	- DeepImport.create_<model_type>( attrs = {} )
		- for constructing a root object instance
	- <model instance>.create_child_<model_type>( attrs = {} )
		- for constructing a model belonging to the first
			- extends method_missing on active record base

	References:
	- <model instance>.soft_reference( other_model_instance )
		- for setting id's for belongs to associations beyond the primary parent
			- extends method_missing on active record base
	- <model instance>.hard_reference( other_model_instance )
		- useful for aligning to existing information such as seed data
		- set the association id based on the other models actual id
			- extends method_missing on active record base

	DeepImport:
		- commit_model_instances: 
			- save models to database
			- assign all association id fields
		- serialize: save models to marshal, json, or yaml format
		- deserialize
