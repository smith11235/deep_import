---
* during save, deep import models doubling
Commit:
	- set deep_import_id = NULL on models
		- to flag that they are finished being loaded
	- delete deep_import* models
		- to save space on the database

	- get deep_import association distribution
		- DeepImportModel.group( belongs_to_id_field ).select( count( deep_import_id ) ).order( belongs_to_id_field )
	- get and compare association distribution 
		- Model.group( belongs_to_id_field ).select( count( id ) ).order( belongs_to_id_field )
		- is the ordering correct to do this? or should I force a group_by deep_import_belongs_to_id_field


---
refactor:
	- gemspec at root
	- .rake in lib/tasks
	- lib/deep_import.rb
indexes:
	- move from deep_import:index to deep_import:setup
tasks:
	benchmark, old, new, compare

---
gemspec:
- add proper dependencies, activerecord, activerecord-import, rails

---
belongs_to:
- to allow:
	- child.other_parent = other_parent
- :before_save:
	- for each /.*_id/ field, if ! self.<non-id>.nil?, set deep import id's accordingly
		- # for each association

---
rake deep_import:setup:
	- detect script/ files
	- run destroy
	- remove both
	- create new ones

---
Config File:
	- Validate: check class names for existence/validity
	- Generate: analyze models with ruby_erd

---
Model Flags:
_preexisting:
	- integer instead of string 
_polymorphic:
