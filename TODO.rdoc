---
testing:
		- commit
			- load models like in cache
			- run commit:
				- cache should be size=0
				- models should be accessible through 'find'
				- use names to ensure everyone is properly associated
				- deep_import_id is null
				- no deep_import models

		- config
			- test for invalid config files
			- test for missing config file
				
---
Commit: id distribution check
	- pre-commit: group by deep_import_model.each_reference_id, count( deep_import_id )
	- post-commit, pre-deep-model-deletion: group by each source_model.deep_import_reference_id, count( deep_import_id )
	- check that counts match up

---
Teardown:
	- revert migrations before deleting files:
		- deep_import_id, index on base models
		- deep_import_* tables
	- add spec for it

---
model logic:
	- disable save: raise error or pring warning
	- reroute create through build

---
Commit:
	- get deep_import association distribution
		- DeepImportModel.group( belongs_to_id_field ).select( count( deep_import_id ) ).order( belongs_to_id_field )
	- get and compare association distribution 
		- Model.group( belongs_to_id_field ).select( count( id ) ).order( belongs_to_id_field )
		- is the ordering correct to do this? or should I force a group_by deep_import_belongs_to_id_field
	activerecord-import:
		- check for errors

---
batch id as part of deep_import_id field:
- get a process id
- set deep_import_id = "#{process_id}.#{id}"
- commit: scope all queries to this process_id prefix

---
belongs_to helpers:
	- implicit assignment from <owner>.<has_*class>.create 
		- following creation ordering with dfs creation orderin
			- fix this, override has_one/has_many to call DeepImport.parent( model )
	- allow: child.other_association = other_parent
	- really need to do meta programming
	- option a: tweak rails: http://errtheblog.com/posts/18-accessor-missing
		- define in model_logic
			- Config.models[ self ].belongs_to.each do 
				- alias_method :active_record_<belongs_to>, :<belongs_to>
				- model_class.class_def
				- define_method :method_name_sym, ...
				- def <belongs_to>=( target )
						ModelsCache.set_association( instance, target )
					end
			- metaprogramming: http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/


---
Config File:
	- Validate: check class names for existence/validity
	- Generate: analyze models with ruby_erd

---
Model Flags:
_polymorphic:
