---
belongs_to helpers:
	- implicit assignment from <owner>.<has_*class>.create 
		- following creation ordering with dfs creation orderin
			- fix this, override has_one/has_many to call DeepImport.parent( model )
	- api: 
		- nested construction:
			- child = parent.children.build
				- set corresponding deep_import_child.deep_import_parent_id = parent.deep_import_id
				- hook into the 'association' call, set some meta flag
			- child = parent.children.create 
				- call build
					- override method definition on model

		- random assignment:
			- child.parent = random_parent 
				- set corresponding deep_import_child.deep_import_parent_id = parent.deep_import_id
				- hook into the 'association' call
		
		- save: raise error, or print warning silently depending on setting

	- option a: tweak rails: http://errtheblog.com/posts/18-accessor-missing
		- define in model_logic
			- Config.models[ self ].belongs_to.each do 
				- alias_method :active_record_<belongs_to>, :<belongs_to>
				- model_class.class_def
				- define_method :method_name_sym, ...
				- def <belongs_to>=( target )
						ModelsCache.set_association( instance, target )
					end
			- metaprogramming: http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/

---
Teardown:
	- add specs for it

---
batch id as part of deep_import_id field:
- get a process id
- set deep_import_id = "#{process_id}.#{id}"
- commit: scope all queries to this process_id prefix

---
Model Flags:
_polymorphic:

---
Config File:
	- spec: 
		- test for invalid config files
		- test for missing config file
