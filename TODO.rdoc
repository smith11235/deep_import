---
belongs_to helpers:
- *** remove dfs logic
	- start with parent method

	- api: 
		- child.parent = random_parent
			- benchmark/associations
				- for all generated methods:
					- make them all rais errors for now
					- For each model with belongs_to or has_one 
						- other=  # done
						- build_other( attributes = {} )
						- create_other( attributes = {} )
						- create_other!( attributes = {} )
					- for each model with has_many:
						- others<< 
						- others.push  
						- others.concat 
						- others.build  
						- others.create # use build
						- others.create! # use build
						- disable:
							- others=(other,other,...) # not implemented yet
							- other_ids=  # not relevant with deep_import
							- .clear
							- .delete
							- .delete_all
							- .destroy
							- .destroy_all
							- .reset

		- save: raise error, or print warning silently depending on setting


		- nested construction:
			- child = parent.children.build
				- hook into has_many/one association helpers
				- call belongs_to logic

			- child = parent.children.create 
				- call build
					- override method definition on model

			- http://errtheblog.com/posts/18-accessor-missing
			- metaprogramming: http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/

---
Teardown:
	- add specs for it

---
batch id as part of deep_import_id field:
- get a process id
- set deep_import_id = "#{process_id}.#{id}"
- commit: scope all queries to this process_id prefix

---
Model Flags:
_polymorphic:

---
Config File:
	- spec: 
		- test for invalid config files
		- test for missing config file
