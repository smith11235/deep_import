---
Commit:
	activerecord-import:
	- check for errors
		- import returns object with:
			- failed_instances => array of failed models
			- num_inserts => number of inserts to load the data

	id distribution check:
	- post-commit, pre-deletes:
		- for each model, for each belongs_to

			- deep import association distribution:
				- belongs_to_id_field = "deep_import_#{belongs_to_class.to_s.underscore}_id"
				- DeepImport*.group( belongs_to_id_field )
					.select( "#{belongs_to_id_field} AS deep_import_id, count( id ) AS references" )
					.order( belongs_to_id_field )

			- source model association distribution:
				- model_table = model_class.to_s.underscore
				- belongs_to_table = belongs_to_class.to_s.underscore
				- Source.joins( belongs_to_table.to_sym ) 
				 	.group( "#{belongs_to_table}.id}" ) 
					.select( "#{belongs_to_table}.deep_import_id, count( #{models_table}.id ) AS references" )
					.order( "#{belongs_to_table}.deep_import_id" )

			- compare to pre-association setting
				- results should have equal sizes
				- for each result:
					- id's should be in order
					- counts should be equal

---
Output:
	- move from stdout to rails log

---
Teardown:
	- make a standalone task

	- revert migrations before deleting files:
		- deep_import_id, index on base models
		- deep_import_* tables

	- add specs for it


---
belongs_to helpers:
	- implicit assignment from <owner>.<has_*class>.create 
		- following creation ordering with dfs creation orderin
			- fix this, override has_one/has_many to call DeepImport.parent( model )
	- allow: child.other_association = other_parent
	- really need to do meta programming
	- option a: tweak rails: http://errtheblog.com/posts/18-accessor-missing
		- define in model_logic
			- Config.models[ self ].belongs_to.each do 
				- alias_method :active_record_<belongs_to>, :<belongs_to>
				- model_class.class_def
				- define_method :method_name_sym, ...
				- def <belongs_to>=( target )
						ModelsCache.set_association( instance, target )
					end
			- metaprogramming: http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/
---
model logic:
	- disable save: raise error or pring warning
	- reroute create through build

---
batch id as part of deep_import_id field:
- get a process id
- set deep_import_id = "#{process_id}.#{id}"
- commit: scope all queries to this process_id prefix

---
Model Flags:
_polymorphic:

---
Config File:
	- spec: 
		- test for invalid config files
		- test for missing config file
