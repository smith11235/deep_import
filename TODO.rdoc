---
Teardown:
	- add guard

	- setup:
		- print out each file that needs to be added
		- make X migrations into 1
			- easily revertable

	- make two cleaner tasks for setup/teardown

	- detect migration name
		- revert migration
		- remove migration file
		- remove model files

	- add specs for it

---
belongs_to helpers:
	- implicit assignment from <owner>.<has_*class>.create 
		- following creation ordering with dfs creation orderin
			- fix this, override has_one/has_many to call DeepImport.parent( model )
	- allow: child.other_association = other_parent
	- really need to do meta programming
	- option a: tweak rails: http://errtheblog.com/posts/18-accessor-missing
		- define in model_logic
			- Config.models[ self ].belongs_to.each do 
				- alias_method :active_record_<belongs_to>, :<belongs_to>
				- model_class.class_def
				- define_method :method_name_sym, ...
				- def <belongs_to>=( target )
						ModelsCache.set_association( instance, target )
					end
			- metaprogramming: http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/

---
model logic:
	- disable save: raise error or pring warning
	- reroute create through build

---
batch id as part of deep_import_id field:
- get a process id
- set deep_import_id = "#{process_id}.#{id}"
- commit: scope all queries to this process_id prefix

---
Model Flags:
_polymorphic:

---
Config File:
	- spec: 
		- test for invalid config files
		- test for missing config file
