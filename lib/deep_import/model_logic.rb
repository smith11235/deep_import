module DeepImport 
=begin
  http://guides.rubyonrails.org/association_basics.html#association-extensions
  https://gist.github.com/bigfive/1399762
  meta-programming reference: http://www.vitarara.org/cms/ruby_metaprogamming_declaratively_adding_methods_to_a_class
  on tweaking rails: http://errtheblog.com/posts/18-accessor-missing
  on rails model callbacks: http://guides.rubyonrails.org/active_record_validations_callbacks.html#after_initialize-and-after_find
      # we are overriding all appropriate methods generated by:
      # http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html
      # has_many, has_one, belongs_to association methods


  # New Blogs
  # https://littlelines.com/blog/2018/01/31/replace-alias-method-chain
=end


  # Common safety guard for Save methods vs No-Op option 

  # TODO: need to add deepimport to model defs
  # Parent
  #   include DeepImport::Importable
  #   has_many :children, extend: DeepImport::HasMany
  #   has_many :in_laws, as: :relation, extend: DeepImport::HasMany
  # InLaw
  #   include DeepImport::Importable
  #   belongs_to :relation, polymorphic: true, extend: DeepImport::BelongsTo
  # 

end
