
<p><b>Left(back)</b> and <b>Right(forward)</b> arrow keys move the slideshow</p>
<script type="text/javascript" src="../impress.js" ></script>
<div id="impress" >
	
<div class='step' data-x='-719.1383079063045' data-y='-750.0' data-z='1316.3738428355591' data-scale='1' data-rotate-x='0' data-rotate-y='118.64788975654116' data-rotate-z='0' >
<h1>DeepImport</h1>

<p>A Bulk Data Loading Gem For Rails and Active Record</p>

<p><a href="https://github.com/smith11235/deep_import">Github</a></p>

<p><a href="https://gist.github.com/smith11235/7281601">Usage Example</a></p>
</div>
<div class='step' data-x='-1262.2064772118447' data-y='-1500.0' data-z='810.4534588022096' data-scale='1' data-rotate-x='0' data-rotate-y='147.29577951308232' data-rotate-z='0' >
<h1>Problem</h1>

<p>You have a lot of data to import into your database.</p>

<p>You want to just use simple active record model code.</p>

<p>It needs to be fast but activerecord gets slow.</p>
</div>
<div class='step' data-x='-1496.2424799060816' data-y='-2250.0' data-z='106.10580250155436' data-scale='1' data-rotate-x='0' data-rotate-y='175.94366926962394' data-rotate-z='0' >
<h1>When performed repeatedly</h1>

<p>Transaction costs become significant</p>

<p><code>
Parent.new.save # causes 1 transaction
</code></p>

<p>They will become a bottleneck when saving thousands of records</p>
</div>
<div class='step' data-x='-1363.9461402385225' data-y='-3000.0' data-z='-624.2202548207136' data-scale='1' data-rotate-x='0' data-rotate-y='155.40844097383535' data-rotate-z='0' >
<h1>Example Bulk Data</h1>

<script src="https://gist.github.com/smith11235/7281452.js"></script>
</div>
<div class='step' data-x='-897.7082161559348' data-y='-3750.0' data-z='-1201.7154233204005' data-scale='1' data-rotate-x='0' data-rotate-y='126.76055121729422' data-rotate-z='0' >
<h1>Example Standard Import Logic</h1>

<script src="https://gist.github.com/smith11235/7405830.js"></script>
</div>
<div class='step' data-x='-211.6800120898008' data-y='-4500.0' data-z='-1484.988744900668' data-scale='1' data-rotate-x='0' data-rotate-y='98.11266146075303' data-rotate-z='0' >
<h1>Claim</h1>

<p>Deep Import can <strong>improve</strong> a bulk data load </p>

<ul>
<li>of <strong>thousands</strong> of associated model instances</li>
<li>from <strong>hours</strong> to <strong>minutes</strong></li>
<li>by eliminating <strong>transaction costs</strong></li>
<li>and temporarily increasing <strong>space</strong></li>
</ul>
</div>
<div class='step' data-x='526.1748415344298' data-y='-5250.0' data-z='-1404.6850309361946' data-scale='1' data-rotate-x='0' data-rotate-y='69.46477170421188' data-rotate-z='0' >
<h1>Example Deep Import Logic</h1>

<script src="https://gist.github.com/smith11235/7405812.js"></script>
</div>
<div class='step' data-x='1135.2037429618922' data-y='-6000.0' data-z='-980.4654312954179' data-scale='1' data-rotate-x='0' data-rotate-y='40.81688194767072' data-rotate-z='0' >
<h1>Did you see the difference?</h1>

<p>(todo) get a screenshot saved to the server app/assets/images</p>
</div>
<div class='step' data-x='1466.2951764976456' data-y='-6750.0' data-z='-316.19369914616954' data-scale='1' data-rotate-x='0' data-rotate-y='12.16899219112957' data-rotate-z='0' >
<h1>Benchmark Conditions</h1>

<ul>
<li><strong>27,930</strong> models

<ul>
<li>to a remote mysql instance</li>
<li>across 3 associated model classes

<ul>
<li>30 Parents</li>
<li>900 Children</li>
<li>27,000 Grand Children</li>
</ul></li>
</ul></li>
</ul>
</div>
<div class='step' data-x='1438.3864119947077' data-y='-7500.0' data-z='425.4932781948394' data-scale='1' data-rotate-x='0' data-rotate-y='16.478897565411607' data-rotate-z='0' >
<h1>Benchmark Results</h1>

<p><strong>Standard</strong> code executed in 90 <strong>minutes</strong></p>

<p><strong>Deep Import</strong> code executed in 90 <strong>seconds</strong></p>
</div>
<div class='step' data-x='1058.310488355588' data-y='-8250.0' data-z='1063.00466143689' data-scale='1' data-rotate-x='0' data-rotate-y='45.12678732195276' data-rotate-z='0' >
<h1>Usage</h1>

<p><a href="https://gist.github.com/smith11235/7280752">Minimal Usage Example</a></p>
</div>
<div class='step' data-x='419.1232472983888' data-y='-9000.0' data-z='1440.2554299755489' data-scale='1' data-rotate-x='0' data-rotate-y='73.77467707849394' data-rotate-z='0' >
<h1>Completeness</h1>

<p>Deep Import works through activerecord but not yet integrated in every way it could be.</p>

<p>As of now it is tested against mysql and postgres.</p>

<p>As of now has<em>one, has</em>many, and polymorphic associations are not yet implemented.</p>
</div>
<div class='step' data-x='-322.67998213172325' data-y='-9750.0' data-z='1464.8814385920352' data-scale='1' data-rotate-x='0' data-rotate-y='102.4225668350351' data-rotate-z='0' >
<h1>Detailed Logging</h1>

<p>The <strong>DeepImport.logger</strong> defaults to writing useful information to <strong>log/deep<em>import</em>#{Rails.env}.log</strong></p>

<ul>
<li>record counts for the model classes being loaded</li>
<li>timing information for each step of the import</li>
</ul>

<p>You can override it with <code>DeepImport.logger = Rails.logger</code></p>

<p><a href="https://gist.github.com/smith11235/7424591">Example Log File</a></p>
</div>
<div class='step' data-x='-985.4798980781836' data-y='-10500.0' data-z='1130.853381514957' data-scale='1' data-rotate-x='0' data-rotate-y='131.07045659157623' data-rotate-z='0' >
<h1>So How Does Deep Import Work?</h1>
</div>
<div class='step' data-x='-1406.9999651621083' data-y='-11250.0' data-z='519.9529767525387' data-scale='1' data-rotate-x='0' data-rotate-y='159.71834634811742' data-rotate-z='0' >
<h1>Space Vs. Time</h1>
<blockquote>
<p>Oldest play in the book</p>
</blockquote>
<p><strong>Transaction time</strong> can be eliminated by increasing <strong>space</strong>.</p>

<p>Extra <strong>hidden</strong> model instances supplement the models being loaded. </p>
</div>
<div class='step' data-x='-1484.0373699350728' data-y='-12000.0' data-z='-218.2500507129203' data-scale='1' data-rotate-x='0' data-rotate-y='171.63376389534156' data-rotate-z='0' >
<h1>DeepImport* Models</h1>

<ul>
<li>for each ModelClass in the config file

<ul>
<li>setup creates a DeepImportModelClass</li>
</ul></li>
</ul>
<blockquote>
<p>Parent =&gt; DeepImportParent</p>
</blockquote>
<p>A DeepImport* model instance is created to track the associations of each source model.</p>
</div>
<div class='step' data-x='-1197.7306689352354' data-y='-12750.0' data-z='-903.0178540272354' data-scale='1' data-rotate-x='0' data-rotate-y='142.98587413880026' data-rotate-z='0' >
<h1>Import Commit Step</h1>

<p>During the commit phase of an import, both the <strong>source</strong> and <strong>deep_import</strong> models are loaded to the database.</p>

<p>The deep<em>import</em>* tables serve as an association index.</p>

<p>Update queries are used to set associations on the source model association id fields for each belongs_to association.</p>

<p>DeepImport* models are deleted from the database after use.</p>
</div>
<div class='step' data-x='-618.1777278626349' data-y='-13500.0' data-z='-1366.6953928270154' data-scale='1' data-rotate-x='0' data-rotate-y='114.33798438225911' data-rotate-z='0' >
<h1>Standard Active Record Runtime</h1>
<blockquote>
<p>O(X) ~ Linear, where X is the number of model instances created</p>
</blockquote>
<p>Each model created with: <strong>Model.new.save</strong></p>

<ul>
<li>1 transaction with the database</li>
</ul>
</div>
</div>
